var path = require('path');
//  當發現有多個連續的斜線時，會替換成一個； 當路徑末尾包含斜線時，會保留；
// 在 Windows 系統會使用反斜線。
var p = path.normalize('foo/bar//baz/asdf/quux/..') ;
var p2 = path.normalize('foo/bar//baz/asdf/quux/../') ;
console.log('p'，p，p2);
//組合參數中的所有路徑，返回規範化後的路徑。
var p3 = path.join('a/b/c'，"d/c/v");
console.log('p3'，p3);
// 返回檔案的絕對路徑
var p4 = path.resolve('name.js');
var p5 = path.resolve('/path/name.js');
console.log('p4'，p4);
console.log('p5'，p5);
//  var ab = path.isAbsolute('name.js');
//  console.log('ab'，ab);
//  返回從 from 到 to 的相對路徑
var res = path.relative('/data/orandea/test/aaa'， '/data/orandea/impl/bbb');
console.log('res'，res);
//path.resolve(from， path.relative(from， to)) == path.resolve(to)
// 檔案的檔案夾名稱
var dir1 = path.dirname('../name.js');
var dir2 = path.dirname('./name.js');
var dir3 = path.dirname('name.js');
var dir4 = path.dirname('/foo/bar/baz/asdf/quux');
//dir1 ..
//dir2 .
//dir3 .
//dir4 /foo/bar/baz/asdf
console.log('dir1'，dir1);
console.log('dir2'，dir2);
console.log('dir3'，dir3);
console.log('dir4'，dir4);
// 返回後檔案基本名稱 第二個參數為 副檔名名如果存在則返回除去副檔名以後的名字
var base1 = path.basename('/foo/bar/baz/asdf/quux.html'， '.html');
var base1 = path.basename('/foo/bar/baz/asdf/quux.html'， '.htm');
var base2 = path.basename('/foo/bar/baz/asdf/quux.html'， 'html');
var base3 = path.basename('/foo/bar/baz/asdf/quux.html');
//  base1 quux
//  base2 quux.
//  base3 quux.html
console.log('base1'，base1);
console.log('base2'，base2);
console.log('base3'，base3);
// 返回副檔名名，  沒有則為空
var en1 = path.extname('name.js');
var en2 = path.extname('test');
console.log('en1 '， en1);
console.log('en2 '， en2);
//en1  .js
//en2
// path.sep 路徑分隔表
var sp = 'foo/bar/baz'.split(path.sep);
//sp [ 'foo'， 'bar'， 'baz' ]
console.log('sp'， sp);
// path.delimiter多個路徑之間的分隔表
var del = process.env.PATH .split(path.delimiter);
console.log('del'， del);
//de [ '/usr/local/bin'，
//    '/usr/bin'，
//    '/bin'，
//    '/usr/sbin'，
//    '/sbin'，
//    '/usr/local/bin'，
//    '/usr/local/git/bin' ]